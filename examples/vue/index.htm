<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>JsonDiff</title>

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.48.4/codemirror.min.css" />
</head>
<body>

    <div id="app">
        <table style="width:100%">
            <tr>
                <td><textarea ref="leftBox" v-model="documentA" style="width:100%; height:200px;"></textarea></td>
                <td><textarea ref="rightBox" v-model="documentB" style="width:100%; height:200px;"></textarea></td>
            </tr>
        </table>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.48.4/codemirror.js"></script>
    <script src="js/fast-json-patch.min.js"></script>
    <script src="js/json-source-map.js"></script>

    <script>

        var app = new Vue({
            el: '#app',
            data: {
                documentA: '{ "firstName": "Albert", "lastName": "Einstein", "speed": "50", "groups": [ { "name": "test", "id": 4 }] }',
                documentB: '{ "firstName": "Albert", "lastName": "Collins", "age": "18", "groups": [ { "name": "thomas", "id": 4 }] }',
            },
            mounted() {

                let addColor = '#58fa58';
                let removeColor = '#dd4444';
                let replaceColor = '#e5e833';

                let spaceCount = 4;
                this.documentA = JSON.stringify(JSON.parse(this.documentA), null, spaceCount);
                this.documentB = JSON.stringify(JSON.parse(this.documentB), null, spaceCount);

                let codemirror1 = CodeMirror.fromTextArea(this.$refs.leftBox, {
                    mode: { name: "javascript", json: true },
                    lineNumbers: true,
                    readOnly: true,
                });

                let codemirror2 = CodeMirror.fromTextArea(this.$refs.rightBox, {
                    mode: { name: "javascript", json: true },
                    lineNumbers: true,
                    readOnly: true,
                });

                let doc1 = codemirror1.getDoc();
                doc1.setValue(this.documentA);

                let doc2 = codemirror2.getDoc();
                doc2.setValue(this.documentB);

                var diffs = jsonpatch.compare(JSON.parse(this.documentA), JSON.parse(this.documentB));
                diffs.forEach((diff) => {

                    let position1 = null;
                    let position2 = null;

                    switch (diff.op) {
                        case 'remove':
                            position1 = this.getStartAndEndPosOfDiff(this.documentA, diff);
                            console.log(position1);
                            doc1.markText(position1.start, position1.end, {
                                css: `background-color:${removeColor}`
                            });
                            break;
                        case 'add':
                            position2 = this.getStartAndEndPosOfDiff(this.documentB, diff);
                            doc2.markText(position2.start, position2.end, {
                                css: `background-color:${addColor}`
                            });
                            break;
                        case 'replace':
                            position1 = this.getStartAndEndPosOfDiff(this.documentA, diff);
                            position2 = this.getStartAndEndPosOfDiff(this.documentB, diff);

                            doc1.markText(position1.start, position1.end, {
                                css: `background-color:${replaceColor}`
                            });

                            doc2.markText(position2.start, position2.end, {
                                css: `background-color:${replaceColor}`
                            });
                            break;
                    }
                });
            },
            methods: {
                //Find an other library for json-source-map or rewrite this logic
                getStartAndEndPosOfDiff(textValue, diff) {
                    let result = parse(textValue);

                    let pointers = result.pointers;
                    let path = diff.path;
                    let pointer = pointers[path];

                    let start = {
                        line: pointer.key ? pointer.key.line : pointer.value.line,
                        ch: pointer.key ? pointer.key.column : pointer.value.column
                    };
                    let end = {
                        line: pointer.valueEnd.line,
                        ch: pointer.valueEnd.column
                    };

                    return {
                        start: start,
                        end: end
                    }
                }
            }
        })

    </script>
</body>
</html>
